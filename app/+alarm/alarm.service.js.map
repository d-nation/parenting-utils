{"version":3,"file":"alarm.service.js","sourceRoot":"","sources":["alarm.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,mBAA2B,SAAS,CAAC,CAAA;AAGrC;IAQE;IAAe,CAAC;IAET,2BAAI,GAAX,UAAY,IAAI,EAAE,MAAM;QAAxB,iBAYC;QAXC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,eAAU,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,UAAA,CAAC;YACtC,KAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,KAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mCAAY,GAApB,UAAqB,IAAI,EAAE,MAAM;QAC/B,IAAI,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC;QAChC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC9B,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAClC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAE7B,EAAE,CAAA,CAAC,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC;YACrC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC9B,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAClC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;QAED,MAAM,CAAC,cAAc,CAAC;IACxB,CAAC;IAEO,qCAAc,GAAtB;QACE,IAAM,YAAY,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;QAEpC,EAAE,CAAA,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;IACH,CAAC;IAvDH;QAAC,iBAAU,EAAE;;oBAAA;IAwDb,mBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,oBAAY,eAuDxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class AlarmService {\n  private currentTime: Date;\n  public alarmTime: Date;\n  public normal: boolean;\n  public warning: boolean;\n  public alarm: boolean;\n  public timer: Observable<any>;\n\n  constructor() {}\n\n  public init(hour, minute) {\n    this.normal = true;\n    this.warning = false;\n    this.alarm = false;\n    this.currentTime = new Date();\n    this.alarmTime = this.setAlarmTime(hour, minute);\n    this.timer = Observable.timer(0,1000);\n\n    let onTimerTick = this.timer.subscribe(x => {\n      this.currentTime = new Date();\n      this.checkAlarmTime();\n    });\n  }\n\n  private setAlarmTime(hour, minute) {\n    let todayAlarmTime = new Date();\n    todayAlarmTime.setHours(hour);\n    todayAlarmTime.setMinutes(minute);\n    todayAlarmTime.setSeconds(0);\n\n    if(this.currentTime > todayAlarmTime) {\n      todayAlarmTime.setDate(this.currentTime.getDate() + 1);\n\n      todayAlarmTime.setHours(hour);\n      todayAlarmTime.setMinutes(minute);\n      todayAlarmTime.setSeconds(0);\n    }\n\n    return todayAlarmTime;\n  }\n\n  private checkAlarmTime () {\n    const FIFTEEN_MINS = 1000 * 60 * 15;\n\n    if(this.currentTime.getTime() >= this.alarmTime.getTime() - FIFTEEN_MINS) {\n      this.normal = false;\n      this.warning = true;\n    } \n    \n    if (this.currentTime.getTime() >= this.alarmTime.getTime()) {\n      this.normal = false;\n      this.warning = false;\n      this.alarm = true;\n    }\n  }\n}\n"]}