{"version":3,"file":"timer.service.js","sourceRoot":"","sources":["timer.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,mBAA2B,SAAS,CAAC,CAAA;AAGrC;IAUE;IAAe,CAAC;IAET,2BAAI,GAAX,UAAY,IAAI,EAAE,MAAM;QAAxB,iBAYC;QAXC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,eAAU,CAAC,KAAK,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,UAAA,CAAC;YACtC,KAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,KAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mCAAY,GAApB,UAAqB,IAAI,EAAE,MAAM;QAC/B,IAAI,WAAW,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;QACzD,IAAI,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,WAAW,CAAC,CAAC;QAEnE,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAEO,qCAAc,GAAtB;QACE,IAAM,YAAY,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;QACpC,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC;QAEjF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC,CAAC,CAAC;QAE5E,EAAE,CAAA,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;IACH,CAAC;IAnDH;QAAC,iBAAU,EAAE;;oBAAA;IAoDb,mBAAC;AAAD,CAAC,AAnDD,IAmDC;AAnDY,oBAAY,eAmDxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class TimerService {\n  private currentTime: Date;\n  public timerTime: Date;\n  public normal: boolean;\n  public warning: boolean;\n  public alarm: boolean;\n  public hoursRemaining: number;\n  public minutesRemaining: number;\n  public timer: Observable<any>;\n\n  constructor() {}\n\n  public init(hour, minute) {\n    this.normal = true;\n    this.warning = false;\n    this.alarm = false;\n    this.currentTime = new Date();\n    this.timerTime = this.setTimerTime(hour, minute);\n    this.timer = Observable.timer(0,1000);\n\n    let onTimerTick = this.timer.subscribe(x => {\n      this.currentTime = new Date();\n      this.checkTimerTime();\n    });\n  }\n\n  private setTimerTime(hour, minute) {\n    let timerLength = ((hour * 3600) + (minute * 60)) * 1000;\n    let timerTime = new Date(this.currentTime.getTime() + timerLength);\n\n    return timerTime;\n  }\n\n  private checkTimerTime () {\n    const FIFTEEN_MINS = 1000 * 60 * 15;\n    let minuteDiff = (this.timerTime.getTime() - this.currentTime.getTime()) / 60000;\n\n    this.hoursRemaining = Math.floor(minuteDiff / 60);\n    this.minutesRemaining = Math.floor(minuteDiff - (this.hoursRemaining * 60));\n\n    if(this.currentTime.getTime() >= this.timerTime.getTime() - FIFTEEN_MINS) {\n      this.normal = false;\n      this.warning = true;\n    } \n    \n    if (this.currentTime.getTime() >= this.timerTime.getTime()) {\n      this.normal = false;\n      this.warning = false;\n      this.alarm = true;\n    }\n  }\n}\n"]}